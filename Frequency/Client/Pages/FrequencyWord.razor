@page "/frequencyword"
@using Frequency.Shared
@using System.Text.Encodings
@using Microsoft.Extensions.Logging
@inject HttpClient Http

<PageTitle>Frequency</PageTitle>

<h1>Frequency</h1>


@if (frequencyResults == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
        <DataAnnotationsValidator />
        <div>
            <div class="row" style="font-size: 1.2rem; width:50%; height:60%; margin:1%; text-align:left;">
                <div class="col-md-3">
                    <label class="form-label">Book URL</label>
                </div>
                <div class="col-md-4">
                    <InputText id="name" @bind-Value="@bookUrl" />
                </div>
            </div>

            <div class="row" style="font-size: 1.2rem; width:100%; height:80%; margin:1%; text-align:left;">
                <div class="col-md-3">
                    <label class="form-label">@MostFrequentWords</label>
                </div>
            </div>
            <div class="row" style="font-size: 1.2rem; width:100%; height:80%; margin:1%; text-align:left;">
                <div class="col-md-3">
                    <label class="form-label">@MostFrequentSevenWords</label>
                </div>
            </div>
            <div class="row" style="font-size: 1.2rem; width:100%; height:80%; margin:1%; text-align:left;">
                <div class="col-md-3">
                    <label class="form-label">@MostFrequentHighestScorings</label>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    <button @onclick="CalculateFrequency" class="btn btn-dark">Calculate</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private FrequencyModel frequencyResults;
    private EditContext editContext;
    [Parameter] public string bookUrl { get; set; } = "";
    private double finalresult;
    private string MostFrequentWords;
    private string MostFrequentSevenWords;
    private string MostFrequentHighestScorings;

    protected override async Task OnInitializedAsync()
    {

        frequencyResults = new FrequencyModel();
        editContext = new EditContext(frequencyResults);
    }

    private async Task CalculateFrequency()
    {
        var stringrequest = string.Format("api/Frequency/GetFrequency?bookURL={0}", bookUrl);
        var result = await Http.GetFromJsonAsync<FrequencyModel>(stringrequest);

        var finalresult = result;

        MostFrequentWords = string.Format("Most frequent word: {0} occured {1} times.", result.MostFrequentWord, result.MostFrequentWordCount);
        MostFrequentSevenWords = string.Format("Most Frequent 7-character word: {0} occured {1} times", result.MostFrequentSevenWord, result.MostFrequentSevenWordCount);
        MostFrequentHighestScorings = string.Format("Highest scoring word(s) (according to the score table): {0} with a score of {1}", result.HighestScoringWord, result.HighestScoringWordCount);
    }

    public void HandleOnValidSubmit()
    {

    }
}
